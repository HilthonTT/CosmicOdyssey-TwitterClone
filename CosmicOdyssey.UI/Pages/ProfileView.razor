@page "/Profiles/{Id:int}"
@inject IProfileData ProfileData
@inject IBlogData BlogData
@inject IFollowingData FollowingData
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation

<Header ShowBackArrow Label="@fetchedProfile?.DisplayName" />

 @if (isLoading || fetchedProfile is null)
{
    <div class="flex justify-center items-center h-full">
        <MudProgressCircular Indeterminate Color="Color.Info" Size="Size.Large" />
     </div>
}

<div class="bg-neutral-700 h-44 relative">
    @if (string.IsNullOrWhiteSpace(fetchedProfile?.CoverImage) is false)
    {
        <div style="position: relative; width: 100%; height: 100%;">
            <MudImage Src="@fetchedProfile?.CoverImage"
                      ObjectFit="ObjectFit.Cover"
                      Alt="Cover Image" Style="width: 100%; height: 100%;" />

            <div class="absolute top-0 right-0 p-2">
                <MudFileUpload T="IBrowserFile" FilesChanged="@(((e) => UploadFileAsync(e, "Cover")))" Accept="image/*">
                    <ButtonTemplate>
                        <MudButton Class="text-white"
                                   Variant="Variant.Filled"
                                   Color="Color.Dark"
                                   HtmlTag="label" for="@context">
                            Add Cover
                        </MudButton>
                    </ButtonTemplate>
                </MudFileUpload>
            </div>
        </div>
    }
    <div class="absolute -bottom-16 left-4">
        <MudFileUpload T="IBrowserFile" FilesChanged="@(((e) => UploadFileAsync(e, "Profile")))" Accept="image/*">
            <ButtonTemplate>
                <label for="@context">
                    <Avatar Profile="fetchedProfile" IsLarge HasBorder />
                 </label>
             </ButtonTemplate>
         </MudFileUpload>
     </div>
 </div>

 <div class="border-b-[1px] border-neutral-800 pb-4">
     <div class="flex justify-end p-2">
         @if ((currentProfile?.Id == fetchedProfile?.Id))
        {
            <MudButton Variant="Variant.Outlined"
                       Class="text-white border-white rounded mr-2"
                       OnClick="EditProfile">
                Edit
            </MudButton>
        }
        else
        {
            <button @onclick="FollowAsync" disabled="@((isBusy || isLoading))"
                    class="@GetFollowButtonClass()">
                <p class="text-center font-semibold @((isFollowing) ? "text-white" : "text-black")">
                    @((isFollowing ? "Unfollow" : "Follow"))
                </p>
            </button>
        }
    </div>
    <div class="mt-8 px-4">
        <div class="flex flex-col">
            <p class="text-white text-2xl font-semibold">
                @fetchedProfile?.FirstName @fetchedProfile?.LastName
            </p>
            <p class="text-md text-neutral-500">
                @@@fetchedProfile?.DisplayName
            </p>
        </div>
        <div class="flex flex-col mt-4">
            <p class="text-white">
                @fetchedProfile?.Bio
            </p>
            <div class="flex flex-row items-center gap-2 mt-4 text-neutral-500">
                <MudIcon Icon="@Icons.Material.Filled.CalendarMonth" />
                <p>
                    Joined @fetchedProfile?.DateCreated.ToString("MMMM yyyy")
                </p>
            </div>
        </div>
        <div class="flex flex-row items-center mt-4 gap-6">
            <div class="flex flex-row align-items-center gap-1">
                <p class="text-white">
                    @fetchedProfile?.FollowingCount
                </p>
                <p class="text-neutral-500">
                    Following
                </p>
            </div>
            <div class="flex flex-row align-items-center gap-1">
                <p class="text-white">
                    @fetchedProfile?.FollowerCount
                </p>
                <p class="text-neutral-500">
                    Followers
                </p>
            </div>
        </div>
    </div>
</div>

@if (blogs is not null)
{
    <Virtualize Items="blogs" OverscanCount="5" Context="blog">
        <BlogItem Blog="blog" CurrentProfile="currentProfile" />
    </Virtualize>
}


@code {
    [Parameter]
    public int Id { get; set; }

    private bool isLoading = true;
    private bool isFollowing = false;
    private bool isBusy = false;
    private List<BlogModel> blogs;
    private List<FollowingModel> followers;
    private ProfileModel currentProfile;
    private ProfileModel fetchedProfile;

    protected override async Task OnInitializedAsync()
    {
        currentProfile = await AuthProvider.GetUserFromAuthAsync(ProfileData);
        await LoadFetchedProfileAsync();
    }

    private async Task LoadFetchedProfileAsync()
    {
        fetchedProfile = await ProfileData.GetProfileAsync(Id);
        if (fetchedProfile is not null)
        {
            blogs = await BlogData.GetProfileBlogsAsync(fetchedProfile.Id);
            followers = await FollowingData.GetFollowersAsync(fetchedProfile.Id);
        }

        isFollowing = followers?.FirstOrDefault(x => x.FollowerId == currentProfile.Id) is not null;
        isLoading = false;
    }

    private void EditProfile()
    {
        Navigation.NavigateTo("/MicrosoftIdentity/Account/EditProfile", true);
    }

    private async Task UploadFileAsync(IBrowserFile file, string cover = "Profile")
    {
        using var stream = file.OpenReadStream(file.Size);
        using var memoryStream = new MemoryStream();

        await stream.CopyToAsync(memoryStream);
        string base64String = Convert.ToBase64String(memoryStream.ToArray());

        switch (cover)
        {
            case "Profile":
                fetchedProfile.ProfileImage = $"data:image/png;base64,{base64String}";
                break;
            default:
                fetchedProfile.CoverImage = $"data:image/png;base64,{base64String}";
                break;
        }

        await ProfileData.UpdateProfileAsync(currentProfile);

        Navigation.NavigateTo($"/Profiles/{currentProfile?.Id}", true);
    }

    private async Task FollowAsync()
    {
        if (currentProfile is null)
        {
            Navigation.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
            return;
        }

        if (fetchedProfile is null)
        {
            Snackbar.Add("Something went wrong.", Severity.Error);
            return;
        }

        try
        {
            isBusy = true;

            isFollowing = await FollowingData.ToggleFollowAsync(currentProfile.Id, fetchedProfile.Id);
            if (isFollowing)
            {
                Snackbar.Add($"Following {fetchedProfile?.DisplayName}", Severity.Info);
                fetchedProfile.FollowerCount += 1;
            }
            else
            {
                Snackbar.Add($"Unfollowed {fetchedProfile?.DisplayName}", Severity.Info);
                fetchedProfile.FollowerCount -= 1;
            }
        }
        catch (Exception)
        {
            Snackbar.Add("Something went wrong.", Severity.Error);
        }
        finally
        {
            isBusy = false;
        }
    }

    private string GetFollowButtonClass()
    {
        string defaultClasses = "rounded-full px-4 p-2 transition border-b-white border-2 border";

        if (isFollowing)
        {
            return $"{defaultClasses} bg-black text-white";
        }

        return $"{defaultClasses} bg-white text-black";
    }
}
