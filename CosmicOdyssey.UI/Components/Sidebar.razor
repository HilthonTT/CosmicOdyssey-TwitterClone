@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager Navigation
@inject IProfileData ProfileData
@inject INotificationData NotificationData

<div class="col-span-1 h-full pr-4 md:pr-6">
    <div class="flex flex-column items-end">
        <div class="space-y-2 lg:w-[230px]">
            <div @onclick="LoadHomePage" class="flex flex-row items-center">
                <div class="relative rounded-full h-14 w-14 flex items-center
                            justify-center p-4 hover:bg-slate-300 hover:bg-opacity-10 transition
                            cursor-pointer lg:hidden">
                    <MudIcon Icon="@Icons.Custom.Brands.Twitter" Size="Size.Large" Class="text-white" Title="Twitter" />
                </div>
                <div class="relative hidden lg:flex items-center gap-4 p-4 rounded-full
                                hover:bg-slate-300 hover:bg-opacity-10 cursor-pointer items-center transition">
                    <MudIcon Icon="@Icons.Custom.Brands.Twitter" Size="Size.Large" Class="text-white" Title="Twitter" />
                </div>
            </div>

            <Virtualize Items="items" Context="item">
                <div @key="@item.Href" @onclick="() => NavigateTo(item.Href)" class="flex flex-row items-center">
                    <div class="relative rounded-full h-14 w-14 flex items-center
                            justify-center p-4 hover:bg-slate-300 hover:bg-opacity-10 transition
                            cursor-pointer lg:hidden">

                        <MudIcon Icon="@item.Icon" Size="Size.Large" Class="text-white" Title="@item.Label" />

                        @if (isAlert && item.Label == "Notifications")
                        {
                            <MudIcon Icon="@Icons.Material.Filled.NotificationImportant"
                                     Class="text-sky-500 absolute bottom-[38px] left-[26px]" />
                        }
                    </div>
                    <div class="relative hidden lg:flex items-center gap-4 p-4 rounded-full
                                hover:bg-slate-300 hover:bg-opacity-10 cursor-pointer items-center transition">
                        <MudIcon Icon="@item.Icon" Size="Size.Large" Class="text-white" Title="@item.Label" />
                        <p class="hidden lg:block text-white text-xl">
                            @item.Label
                        </p>
                        @if (isAlert && item.Label == "Notifications")
                        {
                            <MudIcon Icon="@Icons.Material.Filled.NotificationImportant"
                                     Class="text-sky-500 absolute bottom-[50px] left-10" />
                        }
                    </div>
                </div>
            </Virtualize>

            <AuthorizeView>
                <NotAuthorized>
                    <div @onclick="LogIn" class="flex flex-row items-center">
                        <div class="relative rounded-full h-14 w-14 flex items-center
                            justify-center p-4 hover:bg-slate-300 hover:bg-opacity-10 transition
                            cursor-pointer lg:hidden">
                            <MudIcon Icon="@Icons.Material.Filled.Login" Size="Size.Large" Class="text-white" Title="Login" />
                        </div>
                        <div class="relative hidden lg:flex items-center gap-4 p-4 rounded-full
                                hover:bg-slate-300 hover:bg-opacity-10 cursor-pointer items-center transition">
                            <MudIcon Icon="@Icons.Material.Filled.Login" Size="Size.Large" Class="text-white" Title="Login" />
                            <p class="hidden lg:block text-white text-xl">
                                Login
                            </p>
                        </div>
                    </div>
                </NotAuthorized>
                <Authorized>
                    <div @onclick="LogOut" class="flex flex-row items-center">
                        <div class="relative rounded-full h-14 w-14 flex items-center
                            justify-center p-4 hover:bg-slate-300 hover:bg-opacity-10 transition
                            cursor-pointer lg:hidden">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Size="Size.Large" Class="text-white" Title="Logout" />
                        </div>
                        <div class="relative hidden lg:flex items-center gap-4 p-4 rounded-full
                                hover:bg-slate-300 hover:bg-opacity-10 cursor-pointer items-center transition">
                            <MudIcon Icon="@Icons.Material.Filled.Logout" Size="Size.Large" Class="text-white" Title="Logout" />
                            <p class="hidden lg:block text-white text-xl">
                                Logout
                            </p>
                        </div>
                    </div>
                </Authorized>
            </AuthorizeView>

            <div @onclick="LoadHomePage">
                <div class="relative mt-6 lg:hidden rounded-full h-14 w-14 p-4 flex items-center
                            justify-center bg-sky-500 hover:bg-opacity-80 transition cursor-pointer">
                    <MudIcon Icon="@Icons.Material.Filled.Edit" Class="text-white" Title="Tweet" />
                </div>
                <div class="rmt-6 hidden lg:block px-4 py-2 rounded-full bg-sky-500 hover:bg-opacity-90 cursor-pointer transition">
                    <p class="hidden lg:block text-center font-semibold text-white text-[20px]">
                        Tweet
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<SidebarItemModel> items = new();
    private List<NotificationModel> notifications;
    private ProfileModel currentProfile;
    private bool isAlert = false;

    protected override async Task OnInitializedAsync()
    {
        currentProfile = await AuthProvider.GetUserFromAuthAsync(ProfileData);
        items = new()
        {
            new() { Label = "Home", Href = "/", Icon = Icons.Material.Filled.House },
            new() { Label = "Notifications", Href = "/Notifications", Icon = Icons.Material.Filled.Doorbell },
            new() { Label = "Profile", Href = $"/profiles/{currentProfile?.Id}", Icon = Icons.Material.Filled.Person },
        };

        if (currentProfile is not null)
        {
            notifications = await NotificationData.GetProfileNotificationAsync(currentProfile.Id);
            isAlert = notifications?.Count > 0 ? true : false;
        }
    }

    private void LoadHomePage()
    {
        Navigation.NavigateTo("/");
    }

    private void LogOut()
    {
        Navigation.NavigateTo("/MicrosoftIdentity/Account/SignOut", true);
    }

    private void LogIn()
    {
        Navigation.NavigateTo("/MicrosoftIdentity/Account/SignIn", true);
    }

    private void NavigateTo(string href)
    {
        if (href == "Profile" || currentProfile is null)
        {
            LogIn();
        }
        else
        {
            Navigation.NavigateTo(href);
        }
    }

    private string GetProfileUrl()
    {
        if (currentProfile is null)
        {
            return "/MicrosoftIdentity/Account/SignIn";
        }

        return $"/profiles/{currentProfile?.Id}";
    }
}
